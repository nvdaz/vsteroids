-- autogenerated from logos/game_over.png
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity game_over_sprite is
    port(
		clk : in std_logic;
        x : in unsigned(5 downto 0); -- 0 to 49
        y : in unsigned(2 downto 0); -- 0 to 4
        
        rgb : out std_logic_vector(5 downto 0)
    );
end game_over_sprite;

architecture synth of game_over_sprite is

signal ymul : unsigned(8 downto 0);
signal linear_position : unsigned(10 downto 0);

signal color_index : unsigned(1 downto 0);

begin
    ymul <= y * 6b"110010";
    linear_position <= x + ("00" & ymul); -- 0 to 249

    process(clk) begin
	if rising_edge(clk) then
        case linear_position(7 downto 0) is
			when 8x"00" => color_index <= 2d"0"; -- (0, 0, 0)
			when 8x"32" => color_index <= 2d"0"; -- (0, 1, 0)
			when 8x"64" => color_index <= 2d"0"; -- (0, 2, 0)
			when 8x"96" => color_index <= 2d"0"; -- (0, 3, 0)
			when 8x"c8" => color_index <= 2d"0"; -- (0, 4, 0)
			when 8x"01" => color_index <= 2d"0"; -- (1, 0, 0)
			when 8x"33" => color_index <= 2d"0"; -- (1, 1, 0)
			when 8x"65" => color_index <= 2d"0"; -- (1, 2, 0)
			when 8x"97" => color_index <= 2d"0"; -- (1, 3, 0)
			when 8x"c9" => color_index <= 2d"0"; -- (1, 4, 0)
			when 8x"02" => color_index <= 2d"0"; -- (2, 0, 0)
			when 8x"34" => color_index <= 2d"0"; -- (2, 1, 0)
			when 8x"66" => color_index <= 2d"0"; -- (2, 2, 0)
			when 8x"98" => color_index <= 2d"0"; -- (2, 3, 0)
			when 8x"ca" => color_index <= 2d"0"; -- (2, 4, 0)
			when 8x"03" => color_index <= 2d"0"; -- (3, 0, 0)
			when 8x"35" => color_index <= 2d"1"; -- (3, 1, 0)
			when 8x"67" => color_index <= 2d"1"; -- (3, 2, 0)
			when 8x"99" => color_index <= 2d"1"; -- (3, 3, 0)
			when 8x"cb" => color_index <= 2d"0"; -- (3, 4, 0)
			when 8x"04" => color_index <= 2d"1"; -- (4, 0, 0)
			when 8x"36" => color_index <= 2d"2"; -- (4, 1, 0)
			when 8x"68" => color_index <= 2d"2"; -- (4, 2, 0)
			when 8x"9a" => color_index <= 2d"2"; -- (4, 3, 0)
			when 8x"cc" => color_index <= 2d"1"; -- (4, 4, 0)
			when 8x"05" => color_index <= 2d"1"; -- (5, 0, 0)
			when 8x"37" => color_index <= 2d"0"; -- (5, 1, 0)
			when 8x"69" => color_index <= 2d"1"; -- (5, 2, 0)
			when 8x"9b" => color_index <= 2d"0"; -- (5, 3, 0)
			when 8x"cd" => color_index <= 2d"1"; -- (5, 4, 0)
			when 8x"06" => color_index <= 2d"2"; -- (6, 0, 0)
			when 8x"38" => color_index <= 2d"0"; -- (6, 1, 0)
			when 8x"6a" => color_index <= 2d"1"; -- (6, 2, 0)
			when 8x"9c" => color_index <= 2d"1"; -- (6, 3, 0)
			when 8x"ce" => color_index <= 2d"2"; -- (6, 4, 0)
			when 8x"07" => color_index <= 2d"0"; -- (7, 0, 0)
			when 8x"39" => color_index <= 2d"0"; -- (7, 1, 0)
			when 8x"6b" => color_index <= 2d"2"; -- (7, 2, 0)
			when 8x"9d" => color_index <= 2d"2"; -- (7, 3, 0)
			when 8x"cf" => color_index <= 2d"0"; -- (7, 4, 0)
			when 8x"08" => color_index <= 2d"0"; -- (8, 0, 0)
			when 8x"3a" => color_index <= 2d"1"; -- (8, 1, 0)
			when 8x"6c" => color_index <= 2d"1"; -- (8, 2, 0)
			when 8x"9e" => color_index <= 2d"1"; -- (8, 3, 0)
			when 8x"d0" => color_index <= 2d"1"; -- (8, 4, 0)
			when 8x"09" => color_index <= 2d"1"; -- (9, 0, 0)
			when 8x"3b" => color_index <= 2d"2"; -- (9, 1, 0)
			when 8x"6d" => color_index <= 2d"1"; -- (9, 2, 0)
			when 8x"9f" => color_index <= 2d"2"; -- (9, 3, 0)
			when 8x"d1" => color_index <= 2d"2"; -- (9, 4, 0)
			when 8x"0a" => color_index <= 2d"1"; -- (10, 0, 0)
			when 8x"3c" => color_index <= 2d"0"; -- (10, 1, 0)
			when 8x"6e" => color_index <= 2d"1"; -- (10, 2, 0)
			when 8x"a0" => color_index <= 2d"0"; -- (10, 3, 0)
			when 8x"d2" => color_index <= 2d"0"; -- (10, 4, 0)
			when 8x"0b" => color_index <= 2d"2"; -- (11, 0, 0)
			when 8x"3d" => color_index <= 2d"1"; -- (11, 1, 0)
			when 8x"6f" => color_index <= 2d"1"; -- (11, 2, 0)
			when 8x"a1" => color_index <= 2d"1"; -- (11, 3, 0)
			when 8x"d3" => color_index <= 2d"1"; -- (11, 4, 0)
			when 8x"0c" => color_index <= 2d"0"; -- (12, 0, 0)
			when 8x"3e" => color_index <= 2d"2"; -- (12, 1, 0)
			when 8x"70" => color_index <= 2d"2"; -- (12, 2, 0)
			when 8x"a2" => color_index <= 2d"2"; -- (12, 3, 0)
			when 8x"d4" => color_index <= 2d"2"; -- (12, 4, 0)
			when 8x"0d" => color_index <= 2d"1"; -- (13, 0, 0)
			when 8x"3f" => color_index <= 2d"1"; -- (13, 1, 0)
			when 8x"71" => color_index <= 2d"1"; -- (13, 2, 0)
			when 8x"a3" => color_index <= 2d"1"; -- (13, 3, 0)
			when 8x"d5" => color_index <= 2d"1"; -- (13, 4, 0)
			when 8x"0e" => color_index <= 2d"2"; -- (14, 0, 0)
			when 8x"40" => color_index <= 2d"1"; -- (14, 1, 0)
			when 8x"72" => color_index <= 2d"2"; -- (14, 2, 0)
			when 8x"a4" => color_index <= 2d"2"; -- (14, 3, 0)
			when 8x"d6" => color_index <= 2d"2"; -- (14, 4, 0)
			when 8x"0f" => color_index <= 2d"0"; -- (15, 0, 0)
			when 8x"41" => color_index <= 2d"2"; -- (15, 1, 0)
			when 8x"73" => color_index <= 2d"1"; -- (15, 2, 0)
			when 8x"a5" => color_index <= 2d"0"; -- (15, 3, 0)
			when 8x"d7" => color_index <= 2d"0"; -- (15, 4, 0)
			when 8x"10" => color_index <= 2d"2"; -- (16, 0, 0)
			when 8x"42" => color_index <= 2d"1"; -- (16, 1, 0)
			when 8x"74" => color_index <= 2d"0"; -- (16, 2, 0)
			when 8x"a6" => color_index <= 2d"0"; -- (16, 3, 0)
			when 8x"d8" => color_index <= 2d"0"; -- (16, 4, 0)
			when 8x"11" => color_index <= 2d"1"; -- (17, 0, 0)
			when 8x"43" => color_index <= 2d"1"; -- (17, 1, 0)
			when 8x"75" => color_index <= 2d"1"; -- (17, 2, 0)
			when 8x"a7" => color_index <= 2d"1"; -- (17, 3, 0)
			when 8x"d9" => color_index <= 2d"1"; -- (17, 4, 0)
			when 8x"12" => color_index <= 2d"2"; -- (18, 0, 0)
			when 8x"44" => color_index <= 2d"2"; -- (18, 1, 0)
			when 8x"76" => color_index <= 2d"2"; -- (18, 2, 0)
			when 8x"a8" => color_index <= 2d"2"; -- (18, 3, 0)
			when 8x"da" => color_index <= 2d"2"; -- (18, 4, 0)
			when 8x"13" => color_index <= 2d"1"; -- (19, 0, 0)
			when 8x"45" => color_index <= 2d"1"; -- (19, 1, 0)
			when 8x"77" => color_index <= 2d"1"; -- (19, 2, 0)
			when 8x"a9" => color_index <= 2d"1"; -- (19, 3, 0)
			when 8x"db" => color_index <= 2d"1"; -- (19, 4, 0)
			when 8x"14" => color_index <= 2d"1"; -- (20, 0, 0)
			when 8x"46" => color_index <= 2d"2"; -- (20, 1, 0)
			when 8x"78" => color_index <= 2d"1"; -- (20, 2, 0)
			when 8x"aa" => color_index <= 2d"2"; -- (20, 3, 0)
			when 8x"dc" => color_index <= 2d"1"; -- (20, 4, 0)
			when 8x"15" => color_index <= 2d"1"; -- (21, 0, 0)
			when 8x"47" => color_index <= 2d"0"; -- (21, 1, 0)
			when 8x"79" => color_index <= 2d"1"; -- (21, 2, 0)
			when 8x"ab" => color_index <= 2d"0"; -- (21, 3, 0)
			when 8x"dd" => color_index <= 2d"1"; -- (21, 4, 0)
			when 8x"16" => color_index <= 2d"1"; -- (22, 0, 0)
			when 8x"48" => color_index <= 2d"0"; -- (22, 1, 0)
			when 8x"7a" => color_index <= 2d"2"; -- (22, 2, 0)
			when 8x"ac" => color_index <= 2d"0"; -- (22, 3, 0)
			when 8x"de" => color_index <= 2d"1"; -- (22, 4, 0)
			when 8x"17" => color_index <= 2d"2"; -- (23, 0, 0)
			when 8x"49" => color_index <= 2d"0"; -- (23, 1, 0)
			when 8x"7b" => color_index <= 2d"0"; -- (23, 2, 0)
			when 8x"ad" => color_index <= 2d"0"; -- (23, 3, 0)
			when 8x"df" => color_index <= 2d"2"; -- (23, 4, 0)
			when 8x"18" => color_index <= 2d"0"; -- (24, 0, 0)
			when 8x"4a" => color_index <= 2d"0"; -- (24, 1, 0)
			when 8x"7c" => color_index <= 2d"0"; -- (24, 2, 0)
			when 8x"ae" => color_index <= 2d"0"; -- (24, 3, 0)
			when 8x"e0" => color_index <= 2d"0"; -- (24, 4, 0)
			when 8x"19" => color_index <= 2d"0"; -- (25, 0, 0)
			when 8x"4b" => color_index <= 2d"0"; -- (25, 1, 0)
			when 8x"7d" => color_index <= 2d"0"; -- (25, 2, 0)
			when 8x"af" => color_index <= 2d"0"; -- (25, 3, 0)
			when 8x"e1" => color_index <= 2d"0"; -- (25, 4, 0)
			when 8x"1a" => color_index <= 2d"0"; -- (26, 0, 0)
			when 8x"4c" => color_index <= 2d"1"; -- (26, 1, 0)
			when 8x"7e" => color_index <= 2d"1"; -- (26, 2, 0)
			when 8x"b0" => color_index <= 2d"1"; -- (26, 3, 0)
			when 8x"e2" => color_index <= 2d"0"; -- (26, 4, 0)
			when 8x"1b" => color_index <= 2d"1"; -- (27, 0, 0)
			when 8x"4d" => color_index <= 2d"2"; -- (27, 1, 0)
			when 8x"7f" => color_index <= 2d"2"; -- (27, 2, 0)
			when 8x"b1" => color_index <= 2d"2"; -- (27, 3, 0)
			when 8x"e3" => color_index <= 2d"1"; -- (27, 4, 0)
			when 8x"1c" => color_index <= 2d"1"; -- (28, 0, 0)
			when 8x"4e" => color_index <= 2d"0"; -- (28, 1, 0)
			when 8x"80" => color_index <= 2d"0"; -- (28, 2, 0)
			when 8x"b2" => color_index <= 2d"0"; -- (28, 3, 0)
			when 8x"e4" => color_index <= 2d"1"; -- (28, 4, 0)
			when 8x"1d" => color_index <= 2d"2"; -- (29, 0, 0)
			when 8x"4f" => color_index <= 2d"1"; -- (29, 1, 0)
			when 8x"81" => color_index <= 2d"1"; -- (29, 2, 0)
			when 8x"b3" => color_index <= 2d"1"; -- (29, 3, 0)
			when 8x"e5" => color_index <= 2d"2"; -- (29, 4, 0)
			when 8x"1e" => color_index <= 2d"0"; -- (30, 0, 0)
			when 8x"50" => color_index <= 2d"2"; -- (30, 1, 0)
			when 8x"82" => color_index <= 2d"2"; -- (30, 2, 0)
			when 8x"b4" => color_index <= 2d"2"; -- (30, 3, 0)
			when 8x"e6" => color_index <= 2d"0"; -- (30, 4, 0)
			when 8x"1f" => color_index <= 2d"1"; -- (31, 0, 0)
			when 8x"51" => color_index <= 2d"1"; -- (31, 1, 0)
			when 8x"83" => color_index <= 2d"0"; -- (31, 2, 0)
			when 8x"b5" => color_index <= 2d"0"; -- (31, 3, 0)
			when 8x"e7" => color_index <= 2d"0"; -- (31, 4, 0)
			when 8x"20" => color_index <= 2d"2"; -- (32, 0, 0)
			when 8x"52" => color_index <= 2d"2"; -- (32, 1, 0)
			when 8x"84" => color_index <= 2d"1"; -- (32, 2, 0)
			when 8x"b6" => color_index <= 2d"1"; -- (32, 3, 0)
			when 8x"e8" => color_index <= 2d"0"; -- (32, 4, 0)
			when 8x"21" => color_index <= 2d"0"; -- (33, 0, 0)
			when 8x"53" => color_index <= 2d"0"; -- (33, 1, 0)
			when 8x"85" => color_index <= 2d"2"; -- (33, 2, 0)
			when 8x"b7" => color_index <= 2d"2"; -- (33, 3, 0)
			when 8x"e9" => color_index <= 2d"1"; -- (33, 4, 0)
			when 8x"22" => color_index <= 2d"0"; -- (34, 0, 0)
			when 8x"54" => color_index <= 2d"0"; -- (34, 1, 0)
			when 8x"86" => color_index <= 2d"1"; -- (34, 2, 0)
			when 8x"b8" => color_index <= 2d"1"; -- (34, 3, 0)
			when 8x"ea" => color_index <= 2d"2"; -- (34, 4, 0)
			when 8x"23" => color_index <= 2d"1"; -- (35, 0, 0)
			when 8x"55" => color_index <= 2d"1"; -- (35, 1, 0)
			when 8x"87" => color_index <= 2d"2"; -- (35, 2, 0)
			when 8x"b9" => color_index <= 2d"2"; -- (35, 3, 0)
			when 8x"eb" => color_index <= 2d"0"; -- (35, 4, 0)
			when 8x"24" => color_index <= 2d"2"; -- (36, 0, 0)
			when 8x"56" => color_index <= 2d"2"; -- (36, 1, 0)
			when 8x"88" => color_index <= 2d"0"; -- (36, 2, 0)
			when 8x"ba" => color_index <= 2d"0"; -- (36, 3, 0)
			when 8x"ec" => color_index <= 2d"0"; -- (36, 4, 0)
			when 8x"25" => color_index <= 2d"1"; -- (37, 0, 0)
			when 8x"57" => color_index <= 2d"1"; -- (37, 1, 0)
			when 8x"89" => color_index <= 2d"1"; -- (37, 2, 0)
			when 8x"bb" => color_index <= 2d"1"; -- (37, 3, 0)
			when 8x"ed" => color_index <= 2d"1"; -- (37, 4, 0)
			when 8x"26" => color_index <= 2d"1"; -- (38, 0, 0)
			when 8x"58" => color_index <= 2d"2"; -- (38, 1, 0)
			when 8x"8a" => color_index <= 2d"1"; -- (38, 2, 0)
			when 8x"bc" => color_index <= 2d"2"; -- (38, 3, 0)
			when 8x"ee" => color_index <= 2d"1"; -- (38, 4, 0)
			when 8x"27" => color_index <= 2d"1"; -- (39, 0, 0)
			when 8x"59" => color_index <= 2d"0"; -- (39, 1, 0)
			when 8x"8b" => color_index <= 2d"1"; -- (39, 2, 0)
			when 8x"bd" => color_index <= 2d"0"; -- (39, 3, 0)
			when 8x"ef" => color_index <= 2d"1"; -- (39, 4, 0)
			when 8x"28" => color_index <= 2d"1"; -- (40, 0, 0)
			when 8x"5a" => color_index <= 2d"0"; -- (40, 1, 0)
			when 8x"8c" => color_index <= 2d"2"; -- (40, 2, 0)
			when 8x"be" => color_index <= 2d"0"; -- (40, 3, 0)
			when 8x"f0" => color_index <= 2d"1"; -- (40, 4, 0)
			when 8x"29" => color_index <= 2d"2"; -- (41, 0, 0)
			when 8x"5b" => color_index <= 2d"0"; -- (41, 1, 0)
			when 8x"8d" => color_index <= 2d"0"; -- (41, 2, 0)
			when 8x"bf" => color_index <= 2d"0"; -- (41, 3, 0)
			when 8x"f1" => color_index <= 2d"2"; -- (41, 4, 0)
			when 8x"2a" => color_index <= 2d"1"; -- (42, 0, 0)
			when 8x"5c" => color_index <= 2d"1"; -- (42, 1, 0)
			when 8x"8e" => color_index <= 2d"1"; -- (42, 2, 0)
			when 8x"c0" => color_index <= 2d"1"; -- (42, 3, 0)
			when 8x"f2" => color_index <= 2d"1"; -- (42, 4, 0)
			when 8x"2b" => color_index <= 2d"1"; -- (43, 0, 0)
			when 8x"5d" => color_index <= 2d"2"; -- (43, 1, 0)
			when 8x"8f" => color_index <= 2d"1"; -- (43, 2, 0)
			when 8x"c1" => color_index <= 2d"2"; -- (43, 3, 0)
			when 8x"f3" => color_index <= 2d"2"; -- (43, 4, 0)
			when 8x"2c" => color_index <= 2d"1"; -- (44, 0, 0)
			when 8x"5e" => color_index <= 2d"0"; -- (44, 1, 0)
			when 8x"90" => color_index <= 2d"1"; -- (44, 2, 0)
			when 8x"c2" => color_index <= 2d"1"; -- (44, 3, 0)
			when 8x"f4" => color_index <= 2d"0"; -- (44, 4, 0)
			when 8x"2d" => color_index <= 2d"2"; -- (45, 0, 0)
			when 8x"5f" => color_index <= 2d"1"; -- (45, 1, 0)
			when 8x"91" => color_index <= 2d"2"; -- (45, 2, 0)
			when 8x"c3" => color_index <= 2d"2"; -- (45, 3, 0)
			when 8x"f5" => color_index <= 2d"1"; -- (45, 4, 0)
			when 8x"2e" => color_index <= 2d"0"; -- (46, 0, 0)
			when 8x"60" => color_index <= 2d"2"; -- (46, 1, 0)
			when 8x"92" => color_index <= 2d"0"; -- (46, 2, 0)
			when 8x"c4" => color_index <= 2d"0"; -- (46, 3, 0)
			when 8x"f6" => color_index <= 2d"2"; -- (46, 4, 0)
			when 8x"2f" => color_index <= 2d"0"; -- (47, 0, 0)
			when 8x"61" => color_index <= 2d"0"; -- (47, 1, 0)
			when 8x"93" => color_index <= 2d"0"; -- (47, 2, 0)
			when 8x"c5" => color_index <= 2d"0"; -- (47, 3, 0)
			when 8x"f7" => color_index <= 2d"0"; -- (47, 4, 0)
			when 8x"30" => color_index <= 2d"0"; -- (48, 0, 0)
			when 8x"62" => color_index <= 2d"0"; -- (48, 1, 0)
			when 8x"94" => color_index <= 2d"0"; -- (48, 2, 0)
			when 8x"c6" => color_index <= 2d"0"; -- (48, 3, 0)
			when 8x"f8" => color_index <= 2d"0"; -- (48, 4, 0)
			when 8x"31" => color_index <= 2d"0"; -- (49, 0, 0)
			when 8x"63" => color_index <= 2d"0"; -- (49, 1, 0)
			when 8x"95" => color_index <= 2d"0"; -- (49, 2, 0)
			when 8x"c7" => color_index <= 2d"0"; -- (49, 3, 0)
			when 8x"f9" => color_index <= 2d"0"; -- (49, 4, 0)
			when others => color_index <= 2d"0";
        end case;

        case color_index is
			when 2d"0" => rgb <= "000000"; -- (0, 0, 0)
			when 2d"1" => rgb <= "111111"; -- (3, 3, 3)
			when 2d"2" => rgb <= "101010"; -- (1, 1, 1)
           when others => rgb <= "000000";
           end case;
		end if;
    end process;
end synth;
